##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET := 

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := 

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := 

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.

# Place intel64-specific definitions here if they apply to all supported operating systems.

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
endif

###### Handle exceptions here ######

SELF_INC	:=
SELF_LIBS	:=	-lpthread

##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

# oper-imm.test: $(OBJDIR)oper-imm$(PINTOOL_SUFFIX) $(OBJDIR)oper_imm_app$(EXE_SUFFIX)
# 	$(PIN) -t $(OBJDIR)oper-imm$(PINTOOL_SUFFIX) -o $(OBJDIR)oper-imm.out -- $(OBJDIR)oper_imm_app$(EXE_SUFFIX)
# 	$(DIFF) $(OBJDIR)oper-imm.out oper-imm.$(TARGET).reference
# 	$(RM) $(OBJDIR)oper-imm.out


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######
.PHONY: target dummy
dummy:
	mkdir -p $(OBJDIR)

target: dummy $(OBJDIR)show_inst$(PINTOOL_SUFFIX)

$(OBJDIR)show_inst$(OBJ_SUFFIX): show_inst.cpp
	$(CXX) $(SELF_INC) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)show_inst$(PINTOOL_SUFFIX): $(OBJDIR)show_inst$(OBJ_SUFFIX) $(CONTROLLERLIB)
	$(LINKER) $(SELF_INC) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS) $(SELF_LIBS)
